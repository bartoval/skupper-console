[{"/Users/vabar/Projects/skupper-console/src/API/REST.constant.ts":"1","/Users/vabar/Projects/skupper-console/src/API/REST.interfaces.ts":"2","/Users/vabar/Projects/skupper-console/src/API/REST.ts":"3","/Users/vabar/Projects/skupper-console/src/API/axiosMiddleware.ts":"4","/Users/vabar/Projects/skupper-console/src/API/controllers.ts":"5","/Users/vabar/Projects/skupper-console/src/config.ts":"6","/Users/vabar/Projects/skupper-console/src/core/components/App/index.tsx":"7","/Users/vabar/Projects/skupper-console/src/core/components/DescriptionItem/DescriptionItem.interface.ts":"8","/Users/vabar/Projects/skupper-console/src/core/components/DescriptionItem/index.tsx":"9","/Users/vabar/Projects/skupper-console/src/core/components/EmptyData/EmptyData.enum.ts":"10","/Users/vabar/Projects/skupper-console/src/core/components/EmptyData/EmptyData.interfaces.ts":"11","/Users/vabar/Projects/skupper-console/src/core/components/EmptyData/index.tsx":"12","/Users/vabar/Projects/skupper-console/src/core/components/NavBar/NavBar.constants.ts":"13","/Users/vabar/Projects/skupper-console/src/core/components/NavBar/NavBar.enum.ts":"14","/Users/vabar/Projects/skupper-console/src/core/components/NavBar/NavBar.interfaces.ts":"15","/Users/vabar/Projects/skupper-console/src/core/components/NavBar/index.tsx":"16","/Users/vabar/Projects/skupper-console/src/core/components/RealTimeLineChart/RealTimeLineChart.constants.ts":"17","/Users/vabar/Projects/skupper-console/src/core/components/RealTimeLineChart/RealTimeLineChart.enum.ts":"18","/Users/vabar/Projects/skupper-console/src/core/components/RealTimeLineChart/RealTimeLineChart.interfaces.tsx":"19","/Users/vabar/Projects/skupper-console/src/core/components/RealTimeLineChart/index.tsx":"20","/Users/vabar/Projects/skupper-console/src/core/components/ResourceIcon/index.tsx":"21","/Users/vabar/Projects/skupper-console/src/core/utils/capitalize.ts":"22","/Users/vabar/Projects/skupper-console/src/core/utils/formatBytes.ts":"23","/Users/vabar/Projects/skupper-console/src/core/utils/formatTime.ts":"24","/Users/vabar/Projects/skupper-console/src/core/utils/generateUUID.ts":"25","/Users/vabar/Projects/skupper-console/src/core/utils/groupBy.spec.ts":"26","/Users/vabar/Projects/skupper-console/src/core/utils/groupBy.ts":"27","/Users/vabar/Projects/skupper-console/src/index.tsx":"28","/Users/vabar/Projects/skupper-console/src/layout/AppContent.tsx":"29","/Users/vabar/Projects/skupper-console/src/layout/Header.tsx":"30","/Users/vabar/Projects/skupper-console/src/layout/SideBar.tsx":"31","/Users/vabar/Projects/skupper-console/src/pages/Services/Services.enum.ts":"32","/Users/vabar/Projects/skupper-console/src/pages/Services/index.tsx":"33","/Users/vabar/Projects/skupper-console/src/pages/Services/routes.tsx":"34","/Users/vabar/Projects/skupper-console/src/pages/Services/services/index.ts":"35","/Users/vabar/Projects/skupper-console/src/pages/Services/services/services.enum.ts":"36","/Users/vabar/Projects/skupper-console/src/pages/Services/services/services.interfaces.ts":"37","/Users/vabar/Projects/skupper-console/src/pages/Services/views/Services.tsx":"38","/Users/vabar/Projects/skupper-console/src/pages/Sites/Sites.enum.ts":"39","/Users/vabar/Projects/skupper-console/src/pages/Sites/Sites.interfaces.ts":"40","/Users/vabar/Projects/skupper-console/src/pages/Sites/components/Metrics.enum.ts":"41","/Users/vabar/Projects/skupper-console/src/pages/Sites/components/Metrics.interfaces.ts":"42","/Users/vabar/Projects/skupper-console/src/pages/Sites/components/Metrics.tsx":"43","/Users/vabar/Projects/skupper-console/src/pages/Sites/components/RealTimeMetrics.enum.ts":"44","/Users/vabar/Projects/skupper-console/src/pages/Sites/components/RealTimeMetrics.interfaces.ts":"45","/Users/vabar/Projects/skupper-console/src/pages/Sites/components/RealTimeMetrics.tsx":"46","/Users/vabar/Projects/skupper-console/src/pages/Sites/components/SitesTable.tsx":"47","/Users/vabar/Projects/skupper-console/src/pages/Sites/components/Traffic.enum.ts":"48","/Users/vabar/Projects/skupper-console/src/pages/Sites/index.tsx":"49","/Users/vabar/Projects/skupper-console/src/pages/Sites/routes.tsx":"50","/Users/vabar/Projects/skupper-console/src/pages/Sites/services/index.ts":"51","/Users/vabar/Projects/skupper-console/src/pages/Sites/services/services.enum.ts":"52","/Users/vabar/Projects/skupper-console/src/pages/Sites/services/services.interfaces.ts":"53","/Users/vabar/Projects/skupper-console/src/pages/Sites/views/SItes.tsx":"54","/Users/vabar/Projects/skupper-console/src/pages/Sites/views/Site.tsx":"55","/Users/vabar/Projects/skupper-console/src/pages/Topology/Topology.enum.ts":"56","/Users/vabar/Projects/skupper-console/src/pages/Topology/Topology.interfaces.ts":"57","/Users/vabar/Projects/skupper-console/src/pages/Topology/View/Topology.tsx":"58","/Users/vabar/Projects/skupper-console/src/pages/Topology/components/Details.tsx":"59","/Users/vabar/Projects/skupper-console/src/pages/Topology/components/DetailsDeployment.tsx":"60","/Users/vabar/Projects/skupper-console/src/pages/Topology/components/DetailsSite.tsx":"61","/Users/vabar/Projects/skupper-console/src/pages/Topology/components/TopologySVG.ts":"62","/Users/vabar/Projects/skupper-console/src/pages/Topology/components/TopologySVGContainer.tsx":"63","/Users/vabar/Projects/skupper-console/src/pages/Topology/index.tsx":"64","/Users/vabar/Projects/skupper-console/src/pages/Topology/routes.tsx":"65","/Users/vabar/Projects/skupper-console/src/pages/Topology/services/index.ts":"66","/Users/vabar/Projects/skupper-console/src/pages/Topology/services/services.enum.ts":"67","/Users/vabar/Projects/skupper-console/src/pages/Topology/services/services.interfaces.ts":"68","/Users/vabar/Projects/skupper-console/src/pages/shared/Errors/Connection/Connection.enum.ts":"69","/Users/vabar/Projects/skupper-console/src/pages/shared/Errors/Connection/index.tsx":"70","/Users/vabar/Projects/skupper-console/src/pages/shared/Errors/NotFound/NotFound.enum.ts":"71","/Users/vabar/Projects/skupper-console/src/pages/shared/Errors/NotFound/index.tsx":"72","/Users/vabar/Projects/skupper-console/src/pages/shared/Errors/Server/Server.enum.ts":"73","/Users/vabar/Projects/skupper-console/src/pages/shared/Errors/Server/index.tsx":"74","/Users/vabar/Projects/skupper-console/src/pages/shared/Errors/errors.constants.ts":"75","/Users/vabar/Projects/skupper-console/src/pages/shared/Errors/routes.tsx":"76","/Users/vabar/Projects/skupper-console/src/pages/shared/Loading/Loading.enum.ts":"77","/Users/vabar/Projects/skupper-console/src/pages/shared/Loading/index.tsx":"78","/Users/vabar/Projects/skupper-console/src/routes.ts":"79","/Users/vabar/Projects/skupper-console/src/pages/Addresses/VANServices.constants.ts":"80","/Users/vabar/Projects/skupper-console/src/pages/Addresses/VANServices.enum.ts":"81","/Users/vabar/Projects/skupper-console/src/pages/Addresses/VANServices.interfaces.ts":"82","/Users/vabar/Projects/skupper-console/src/pages/Addresses/components/FlowPairsTable.tsx":"83","/Users/vabar/Projects/skupper-console/src/pages/Addresses/components/ProcessesTable.tsx":"84","/Users/vabar/Projects/skupper-console/src/pages/Addresses/index.tsx":"85","/Users/vabar/Projects/skupper-console/src/pages/Addresses/routes.tsx":"86","/Users/vabar/Projects/skupper-console/src/pages/Addresses/services/index.ts":"87","/Users/vabar/Projects/skupper-console/src/pages/Addresses/services/services.enum.ts":"88","/Users/vabar/Projects/skupper-console/src/pages/Addresses/services/services.interfaces.ts":"89","/Users/vabar/Projects/skupper-console/src/pages/Addresses/views/FlowPairs.tsx":"90","/Users/vabar/Projects/skupper-console/src/pages/Addresses/views/VANServices.tsx":"91"},{"size":2059,"mtime":1663166569128,"results":"92","hashOfConfig":"93"},{"size":5571,"mtime":1663172097601,"results":"94","hashOfConfig":"93"},{"size":7658,"mtime":1663171885696,"results":"95","hashOfConfig":"93"},{"size":1138,"mtime":1663166073910,"results":"96","hashOfConfig":"93"},{"size":1601,"mtime":1663171792484,"results":"97","hashOfConfig":"93"},{"size":915,"mtime":1663166073915,"results":"98","hashOfConfig":"93"},{"size":1017,"mtime":1663166073916,"results":"99","hashOfConfig":"93"},{"size":80,"mtime":1663166073917,"results":"100","hashOfConfig":"93"},{"size":428,"mtime":1663166073918,"results":"101","hashOfConfig":"93"},{"size":63,"mtime":1663166073918,"results":"102","hashOfConfig":"93"},{"size":58,"mtime":1663162558904,"results":"103","hashOfConfig":"93"},{"size":593,"mtime":1663162558905,"results":"104","hashOfConfig":"93"},{"size":1031,"mtime":1663171995336,"results":"105","hashOfConfig":"93"},{"size":195,"mtime":1663166073919,"results":"106","hashOfConfig":"93"},{"size":551,"mtime":1663171995336,"results":"107","hashOfConfig":"93"},{"size":683,"mtime":1655753748643,"results":"108","hashOfConfig":"93"},{"size":151,"mtime":1663166073920,"results":"109","hashOfConfig":"93"},{"size":444,"mtime":1663166073921,"results":"110","hashOfConfig":"93"},{"size":564,"mtime":1663166073922,"results":"111","hashOfConfig":"93"},{"size":4690,"mtime":1663166073922,"results":"112","hashOfConfig":"93"},{"size":795,"mtime":1663166073924,"results":"113","hashOfConfig":"93"},{"size":115,"mtime":1663162558907,"results":"114","hashOfConfig":"93"},{"size":624,"mtime":1663166073925,"results":"115","hashOfConfig":"93"},{"size":968,"mtime":1663166073926,"results":"116","hashOfConfig":"93"},{"size":853,"mtime":1655753748645,"results":"117","hashOfConfig":"93"},{"size":830,"mtime":1663166073926,"results":"118","hashOfConfig":"93"},{"size":333,"mtime":1663166073927,"results":"119","hashOfConfig":"93"},{"size":681,"mtime":1663166073929,"results":"120","hashOfConfig":"93"},{"size":509,"mtime":1655753748645,"results":"121","hashOfConfig":"93"},{"size":1006,"mtime":1663162558908,"results":"122","hashOfConfig":"93"},{"size":270,"mtime":1655753748645,"results":"123","hashOfConfig":"93"},{"size":205,"mtime":1663166073929,"results":"124","hashOfConfig":"93"},{"size":264,"mtime":1655753748653,"results":"125","hashOfConfig":"93"},{"size":630,"mtime":1663166073929,"results":"126","hashOfConfig":"93"},{"size":211,"mtime":1655753748653,"results":"127","hashOfConfig":"93"},{"size":72,"mtime":1655753748653,"results":"128","hashOfConfig":"93"},{"size":95,"mtime":1655753748654,"results":"129","hashOfConfig":"93"},{"size":2621,"mtime":1663166073929,"results":"130","hashOfConfig":"93"},{"size":627,"mtime":1663166073930,"results":"131","hashOfConfig":"93"},{"size":112,"mtime":1663166073930,"results":"132","hashOfConfig":"93"},{"size":406,"mtime":1663166073931,"results":"133","hashOfConfig":"93"},{"size":644,"mtime":1663166073931,"results":"134","hashOfConfig":"93"},{"size":11466,"mtime":1663166073931,"results":"135","hashOfConfig":"93"},{"size":282,"mtime":1663166073931,"results":"136","hashOfConfig":"93"},{"size":612,"mtime":1663166073931,"results":"137","hashOfConfig":"93"},{"size":6408,"mtime":1663166073932,"results":"138","hashOfConfig":"93"},{"size":2509,"mtime":1663166073932,"results":"139","hashOfConfig":"93"},{"size":498,"mtime":1663166073932,"results":"140","hashOfConfig":"93"},{"size":256,"mtime":1660817873868,"results":"141","hashOfConfig":"93"},{"size":781,"mtime":1663166073932,"results":"142","hashOfConfig":"93"},{"size":1608,"mtime":1663172963620,"results":"143","hashOfConfig":"93"},{"size":203,"mtime":1663172609357,"results":"144","hashOfConfig":"93"},{"size":426,"mtime":1663172710339,"results":"145","hashOfConfig":"93"},{"size":1184,"mtime":1663166073936,"results":"146","hashOfConfig":"93"},{"size":5470,"mtime":1663173408886,"results":"147","hashOfConfig":"93"},{"size":272,"mtime":1663166073937,"results":"148","hashOfConfig":"93"},{"size":454,"mtime":1663166073937,"results":"149","hashOfConfig":"93"},{"size":1762,"mtime":1663166073938,"results":"150","hashOfConfig":"93"},{"size":4858,"mtime":1663166073939,"results":"151","hashOfConfig":"93"},{"size":2370,"mtime":1663166073939,"results":"152","hashOfConfig":"93"},{"size":4025,"mtime":1663172842291,"results":"153","hashOfConfig":"93"},{"size":17393,"mtime":1663166073941,"results":"154","hashOfConfig":"93"},{"size":9371,"mtime":1663166073942,"results":"155","hashOfConfig":"93"},{"size":155,"mtime":1663162558932,"results":"156","hashOfConfig":"93"},{"size":629,"mtime":1663166073943,"results":"157","hashOfConfig":"93"},{"size":5637,"mtime":1663166073944,"results":"158","hashOfConfig":"93"},{"size":167,"mtime":1663166073945,"results":"159","hashOfConfig":"93"},{"size":562,"mtime":1663166073946,"results":"160","hashOfConfig":"93"},{"size":235,"mtime":1655753748660,"results":"161","hashOfConfig":"93"},{"size":1851,"mtime":1655753748660,"results":"162","hashOfConfig":"93"},{"size":282,"mtime":1663162558945,"results":"163","hashOfConfig":"93"},{"size":1058,"mtime":1663162558945,"results":"164","hashOfConfig":"93"},{"size":331,"mtime":1655753748661,"results":"165","hashOfConfig":"93"},{"size":1039,"mtime":1655753748661,"results":"166","hashOfConfig":"93"},{"size":516,"mtime":1663162558946,"results":"167","hashOfConfig":"93"},{"size":842,"mtime":1663162558946,"results":"168","hashOfConfig":"93"},{"size":274,"mtime":1655753748662,"results":"169","hashOfConfig":"93"},{"size":2140,"mtime":1663166073957,"results":"170","hashOfConfig":"93"},{"size":487,"mtime":1663171995335,"results":"171","hashOfConfig":"93"},{"size":1588,"mtime":1663166073946,"results":"172","hashOfConfig":"93"},{"size":2475,"mtime":1663166073947,"results":"173","hashOfConfig":"93"},{"size":1644,"mtime":1663166073948,"results":"174","hashOfConfig":"93"},{"size":8588,"mtime":1663166073950,"results":"175","hashOfConfig":"93"},{"size":5731,"mtime":1663166073951,"results":"176","hashOfConfig":"93"},{"size":270,"mtime":1663166073951,"results":"177","hashOfConfig":"93"},{"size":911,"mtime":1663166073952,"results":"178","hashOfConfig":"93"},{"size":9592,"mtime":1663171885740,"results":"179","hashOfConfig":"93"},{"size":407,"mtime":1663166073953,"results":"180","hashOfConfig":"93"},{"size":1699,"mtime":1663171990346,"results":"181","hashOfConfig":"93"},{"size":5878,"mtime":1663166073955,"results":"182","hashOfConfig":"93"},{"size":6895,"mtime":1663166073956,"results":"183","hashOfConfig":"93"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"so2a3t",{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"223"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"230"},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246"},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","suppressedMessages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","suppressedMessages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265"},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","suppressedMessages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","suppressedMessages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","suppressedMessages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","suppressedMessages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","suppressedMessages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","suppressedMessages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","suppressedMessages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","suppressedMessages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","suppressedMessages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","suppressedMessages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","suppressedMessages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","suppressedMessages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","suppressedMessages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","suppressedMessages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","suppressedMessages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","suppressedMessages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","suppressedMessages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"326","messages":"327","suppressedMessages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","suppressedMessages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"332","messages":"333","suppressedMessages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","suppressedMessages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"338","messages":"339","suppressedMessages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","suppressedMessages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"344","messages":"345","suppressedMessages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"347","messages":"348","suppressedMessages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"350","messages":"351","suppressedMessages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"353","messages":"354","suppressedMessages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"356","messages":"357","suppressedMessages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"359","messages":"360","suppressedMessages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","suppressedMessages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"365","messages":"366","suppressedMessages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"368","messages":"369","suppressedMessages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"371","messages":"372","suppressedMessages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374"},{"filePath":"375","messages":"376","suppressedMessages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"378","messages":"379","suppressedMessages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"381","messages":"382","suppressedMessages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","suppressedMessages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"387","messages":"388","suppressedMessages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"390","messages":"391","suppressedMessages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"393","messages":"394","suppressedMessages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","suppressedMessages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"399","messages":"400","suppressedMessages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"402","messages":"403","suppressedMessages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"405","messages":"406","suppressedMessages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"408","messages":"409","suppressedMessages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"411","messages":"412","suppressedMessages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"414","messages":"415","suppressedMessages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"417","messages":"418","suppressedMessages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"420","messages":"421","suppressedMessages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"423","messages":"424","suppressedMessages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"426"},{"filePath":"427","messages":"428","suppressedMessages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"430","messages":"431","suppressedMessages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"433","messages":"434","suppressedMessages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"436","messages":"437","suppressedMessages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439"},{"filePath":"440","messages":"441","suppressedMessages":"442","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443"},{"filePath":"444","messages":"445","suppressedMessages":"446","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"447","messages":"448","suppressedMessages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"450","messages":"451","suppressedMessages":"452","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453"},{"filePath":"454","messages":"455","suppressedMessages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"457","messages":"458","suppressedMessages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"460","messages":"461","suppressedMessages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"463","messages":"464","suppressedMessages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/vabar/Projects/skupper-console/src/API/REST.constant.ts",[],[],"/Users/vabar/Projects/skupper-console/src/API/REST.interfaces.ts",[],[],"/Users/vabar/Projects/skupper-console/src/API/REST.ts",[],[],"/Users/vabar/Projects/skupper-console/src/API/axiosMiddleware.ts",[],[],"/Users/vabar/Projects/skupper-console/src/API/controllers.ts",[],[],"/Users/vabar/Projects/skupper-console/src/config.ts",[],[],"/Users/vabar/Projects/skupper-console/src/core/components/App/index.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/core/components/DescriptionItem/DescriptionItem.interface.ts",[],[],"/Users/vabar/Projects/skupper-console/src/core/components/DescriptionItem/index.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/core/components/EmptyData/EmptyData.enum.ts",[],[],"/Users/vabar/Projects/skupper-console/src/core/components/EmptyData/EmptyData.interfaces.ts",[],[],"/Users/vabar/Projects/skupper-console/src/core/components/EmptyData/index.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/core/components/NavBar/NavBar.constants.ts",["466"],[],"//import { OverviewRoutesPaths } from '@pages/Overview/Overview.enum';\n//import { ServicesRoutesPaths } from '@pages/Services/Services.enum';\nimport { SitesRoutesPaths } from '@pages/Sites/Sites.enum';\nimport { TopologyRoutesPaths } from '@pages/Topology/Topology.enum';\nimport { VANServicesRoutesPaths } from '@pages/Addresses/VANServices.enum';\n\nimport { NavBarLabels } from './NavBar.enum';\nimport { NavBarRouteProps } from './NavBar.interfaces';\n\nexport const RoutesProps: NavBarRouteProps[] = [\n    // {\n    //     path: OverviewRoutesPaths.Overview,\n    //     name: NavBarLabels.SideBarOverview,\n    // },\n    {\n        path: SitesRoutesPaths.Sites,\n        name: NavBarLabels.SideBarSite,\n    },\n    // {\n    //     path: ServicesRoutesPaths.Services,\n    //     name: NavBarLabels.SideBarServices,\n    // },\n    {\n        path: VANServicesRoutesPaths.VANServices,\n        name: NavBarLabels.SideBarVanServices,\n    },\n    {\n        path: TopologyRoutesPaths.Topology,\n        name: NavBarLabels.SideBarTopology,\n    },\n];\n","/Users/vabar/Projects/skupper-console/src/core/components/NavBar/NavBar.enum.ts",[],[],"/Users/vabar/Projects/skupper-console/src/core/components/NavBar/NavBar.interfaces.ts",["467"],[],"import { ServicesRoutesPaths } from '@pages/Services/Services.enum';\nimport { SitesRoutesPaths } from '@pages/Sites/Sites.enum';\nimport { TopologyRoutesPaths } from '@pages/Topology/Topology.enum';\nimport { VANServicesRoutesPaths } from '@pages/Addresses/VANServices.enum';\n\nimport { NavBarLabels } from './NavBar.enum';\n\nexport interface NavBarRouteProps {\n    path:\n        | SitesRoutesPaths.Sites\n        | ServicesRoutesPaths.Services\n        | VANServicesRoutesPaths.VANServices\n        | TopologyRoutesPaths.Topology;\n    name: NavBarLabels;\n}\n","/Users/vabar/Projects/skupper-console/src/core/components/NavBar/index.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/core/components/RealTimeLineChart/RealTimeLineChart.constants.ts",[],[],"/Users/vabar/Projects/skupper-console/src/core/components/RealTimeLineChart/RealTimeLineChart.enum.ts",[],[],"/Users/vabar/Projects/skupper-console/src/core/components/RealTimeLineChart/RealTimeLineChart.interfaces.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/core/components/RealTimeLineChart/index.tsx",["468"],[],"import React, { memo, useEffect, useState } from 'react';\n\nimport {\n    Chart,\n    ChartAxis,\n    ChartGroup,\n    ChartLine,\n    ChartVoronoiContainer,\n} from '@patternfly/react-charts';\n\nimport { formatTime } from '@core/utils/formatTime';\n\nimport { chartConfig } from './RealTimeLineChart.constants';\nimport { ChartThemeColors, TrafficChartLabels } from './RealTimeLineChart.enum';\nimport { SampleProps, RealTimeLineChartProps } from './RealTimeLineChart.interfaces';\n\nconst RealTimeLineChart = memo(function ({ data, options }: RealTimeLineChartProps) {\n    const [timestamp, setTimestamp] = useState(new Date().getTime());\n    const [lastTimestamp] = useState(new Date().getTime());\n    const [samples, setSamples] = useState<SampleProps[][] | null>(null);\n\n    useEffect(() => {\n        const lowerBoundTimestamp = timestamp - chartConfig.timestampWindowUpperBound;\n        const newSamplesBySite = data.map(({ value, name }, index) => {\n            const sample = {\n                y: value,\n                name,\n                x: `${timestamp - lastTimestamp}`,\n                timestamp,\n            };\n\n            const newSamples = [\n                ...((samples && samples[index]) || [{ name: '.', x: '0', y: 0, timestamp: 0 }]),\n                sample,\n            ];\n\n            return newSamples.filter((newSample) => newSample.timestamp - lowerBoundTimestamp > 0);\n        });\n\n        setSamples(newSamplesBySite);\n    }, [timestamp]);\n\n    useEffect(() => {\n        setInterval(() => {\n            setTimestamp(new Date().getTime());\n        }, 1000);\n    }, []);\n\n    if (!samples) {\n        return null;\n    }\n\n    const height = options?.height || chartConfig.height;\n\n    return (\n        <div style={{ height: `${height}px` }}>\n            <Chart\n                containerComponent={\n                    <ChartVoronoiContainer\n                        labels={({ datum }) =>\n                            `${datum.name}: ${\n                                options?.formatter ? options.formatter(datum.y, 3) : datum.y\n                            }`\n                        }\n                        constrainToVisibleArea\n                    />\n                }\n                legendData={options?.dataLegend}\n                legendOrientation=\"horizontal\"\n                legendPosition=\"bottom\"\n                legendAllowWrap={true}\n                height={height}\n                domainPadding={{ y: [10, 10] }}\n                padding={\n                    options?.padding || {\n                        bottom: 250,\n                        left: 90,\n                        right: 20,\n                        top: 0,\n                    }\n                }\n                width={chartConfig.width}\n                themeColor={options?.chartColor ? options.chartColor : ChartThemeColors.Blue}\n            >\n                <ChartAxis // X axis\n                    tickFormat={(_, index, ticks) => {\n                        if (index === ticks.length - 1) {\n                            return TrafficChartLabels.TickFormatUpperBoundLabel;\n                        }\n\n                        if (index === 0) {\n                            return Number(ticks[ticks.length - 1]) <=\n                                chartConfig.timestampWindowUpperBound\n                                ? `${formatTime(Math.floor(ticks[ticks.length - 1] / 1000), {\n                                      startSize: 'sec',\n                                  })} ${TrafficChartLabels.TickFormatLowerBoundLabel}`\n                                : TrafficChartLabels.TickFormatLowerBoundLabelOverflow;\n                        }\n\n                        return '';\n                    }}\n                />\n                <ChartAxis // y axis\n                    showGrid\n                    dependentAxis\n                    fixLabelOverlap={true}\n                    style={{\n                        tickLabels: { fontSize: 12 },\n                    }}\n                    tickFormat={(tick) =>\n                        options?.formatter ? options?.formatter(tick, 3) : Math.ceil(tick)\n                    }\n                />\n                <ChartGroup>\n                    {samples?.map((sampleGroup: SampleProps[], index) => (\n                        <ChartLine\n                            key={index}\n                            data={sampleGroup}\n                            animate={{\n                                duration: 0,\n                                onLoad: { duration: 0 },\n                            }}\n                        />\n                    ))}\n                </ChartGroup>\n            </Chart>\n        </div>\n    );\n});\n\nexport default RealTimeLineChart;\n","/Users/vabar/Projects/skupper-console/src/core/components/ResourceIcon/index.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/core/utils/capitalize.ts",[],[],"/Users/vabar/Projects/skupper-console/src/core/utils/formatBytes.ts",[],[],"/Users/vabar/Projects/skupper-console/src/core/utils/formatTime.ts",[],[],"/Users/vabar/Projects/skupper-console/src/core/utils/generateUUID.ts",[],[],"/Users/vabar/Projects/skupper-console/src/core/utils/groupBy.spec.ts",["469"],[],"import { expect } from '@jest/globals';\n\nimport { groupBy } from './groupBy';\n\ndescribe('groupBy groupBy', () => {\n    it('Should group an array in a grouped key-value object based on the input grouper function', () => {\n        const mockText = [\n            {\n                title: 'title 1',\n                description: 'description 1',\n                items: 'item 1',\n            },\n            {\n                title: 'title 2',\n                description: 'description 2',\n                items: 'item 2',\n            },\n        ];\n\n        const mockTextExpected = {\n            'description 1': [mockText[0]],\n            'description 2': [mockText[1]],\n        };\n\n        expect(groupBy(mockText, (item: Record<string, any>) => item.description)).toStrictEqual(\n            mockTextExpected,\n        );\n    });\n});\n","/Users/vabar/Projects/skupper-console/src/core/utils/groupBy.ts",[],[],"/Users/vabar/Projects/skupper-console/src/index.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/layout/AppContent.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/layout/Header.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/layout/SideBar.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Services/Services.enum.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Services/index.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Services/routes.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Services/services/index.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Services/services/services.enum.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Services/services/services.interfaces.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Services/views/Services.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Sites/Sites.enum.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Sites/Sites.interfaces.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Sites/components/Metrics.enum.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Sites/components/Metrics.interfaces.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Sites/components/Metrics.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Sites/components/RealTimeMetrics.enum.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Sites/components/RealTimeMetrics.interfaces.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Sites/components/RealTimeMetrics.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Sites/components/SitesTable.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Sites/components/Traffic.enum.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Sites/index.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Sites/routes.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Sites/services/index.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Sites/services/services.enum.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Sites/services/services.interfaces.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Sites/views/SItes.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Sites/views/Site.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Topology/Topology.enum.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Topology/Topology.interfaces.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Topology/View/Topology.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Topology/components/Details.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Topology/components/DetailsDeployment.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Topology/components/DetailsSite.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Topology/components/TopologySVG.ts",["470"],[],"import { set } from 'd3-collection';\nimport { drag } from 'd3-drag';\nimport {\n    forceSimulation,\n    forceCenter,\n    forceLink,\n    forceX,\n    forceY,\n    Simulation,\n    ForceLink,\n    forceCollide,\n    forceManyBody,\n} from 'd3-force';\nimport { polygonCentroid, polygonHull } from 'd3-polygon';\nimport { scaleOrdinal } from 'd3-scale';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport { select, Selection } from 'd3-selection';\nimport { curveCatmullRomClosed, Line, line } from 'd3-shape';\nimport { zoom, zoomTransform, zoomIdentity, ZoomBehavior } from 'd3-zoom';\n\nimport { TopologyNode, TopologyLink, TopologyLinkNormalized } from '../Topology.interfaces';\n\nconst ARROW_SIZE = 10;\nconst SERVICE_SIZE = 35;\nconst FONT_SIZE_DEFAULT = 12;\nconst OPACITY_NO_SELECTED_ITEM = 0.2;\nexport default class TopologySVG {\n    $root: HTMLElement;\n    nodes: TopologyNode[];\n    links: TopologyLink[] | TopologyLinkNormalized[];\n    width: number;\n    height: number;\n    onClickNode: Function;\n    force: Simulation<TopologyNode, TopologyLinkNormalized>;\n    svgContainer: Selection<SVGSVGElement, unknown, null, undefined>;\n    svgContainerGroupNodes: Selection<SVGGElement, unknown, null, undefined>;\n    isDraggingNode: boolean;\n    handleZoom: ZoomBehavior<SVGSVGElement, unknown>;\n    valueline: Line<[number, number]>;\n    groupIds: string[];\n\n    constructor(\n        $node: HTMLElement,\n        nodes: TopologyNode[],\n        links: TopologyLink[],\n        boxWidth: number,\n        boxHeight: number,\n        onclick: Function,\n    ) {\n        this.$root = $node;\n        this.nodes = nodes;\n        this.links = links;\n        this.width = boxWidth;\n        this.height = boxHeight;\n        this.onClickNode = onclick;\n\n        this.isDraggingNode = false;\n        this.force = this.initForce(nodes);\n\n        this.svgContainer = this.createSvgContainer();\n        this.svgContainerGroupNodes = this.svgContainer\n            .append('g')\n            .attr('width', '100%')\n            .attr('height', '100%');\n\n        (this.valueline = line()\n            .x(function (d) {\n                return d[0];\n            })\n            .y(function (d) {\n                return d[1];\n            })\n            .curve(curveCatmullRomClosed)),\n            (this.groupIds = []);\n\n        this.handleZoom = zoom<SVGSVGElement, unknown>()\n            .scaleExtent([0.5, 4])\n            .on('zoom', ({ transform }) => {\n                this.svgContainerGroupNodes.attr('transform', transform);\n            });\n\n        this.svgContainer.call(this.handleZoom);\n    }\n\n    private createSvgContainer() {\n        return select(this.$root)\n            .append('svg')\n            .attr('id', 'topology-draw-panel')\n            .attr('preserveAspectRatio', 'xMinYMin meet')\n            .attr('viewBox', `0 0 ${this.width} ${this.height}`)\n            .attr('width', '100%')\n            .attr('height', '100%')\n            .style('background-color', 'var(--pf-global--BackgroundColor--100)');\n    }\n\n    private fixNodes = (x: number, y: number) => {\n        this.nodes.forEach(function (node) {\n            if (x !== node.x || y !== node.y) {\n                node.fx = node.x;\n                node.fy = node.y;\n            }\n        });\n    };\n\n    private dragStarted = ({ active }: { active: boolean }, node: TopologyNode) => {\n        if (!active) {\n            this.force.alphaTarget(0.3).restart();\n        }\n\n        node.fx = node.x;\n        node.fy = node.y;\n\n        this.fixNodes(node.x, node.y);\n        this.isDraggingNode = true;\n    };\n\n    private dragged = ({ x, y }: { x: number; y: number }, node: TopologyNode) => {\n        node.fx = x;\n        node.fy = y;\n    };\n\n    private dragEnded = ({ active }: { active: boolean }, node: TopologyNode) => {\n        if (!active) {\n            this.force.alphaTarget(0);\n            this.force.stop();\n        }\n\n        localStorage.setItem(node.id, JSON.stringify({ fx: node.x, fy: node.y }));\n        this.isDraggingNode = false;\n    };\n\n    private groupDragstarted = (\n        { x, y, active }: { x: number; y: number; active: boolean },\n        groupId: string,\n    ) => {\n        if (!active) {\n            this.force.alphaTarget(0.3).restart();\n        }\n\n        this.force\n            .nodes()\n            .filter(({ group }) => group === Number(groupId))\n            .forEach((node: TopologyNode) => {\n                node.fx = (node.fx || 0) + x;\n                node.fy = (node.fy || 0) + y;\n            });\n\n        this.isDraggingNode = true;\n    };\n\n    private groupDragged = ({ x, y }: { x: number; y: number }, groupId: string) => {\n        this.force\n            .nodes()\n            .filter(({ group }) => group === Number(groupId))\n            .forEach((node: TopologyNode) => {\n                node.fx = (node.fx || 0) + x;\n                node.fy = (node.fy || 0) + y;\n            });\n    };\n\n    private groupDragended = ({ active }: { active: boolean }, groupId: string) => {\n        if (!active) {\n            this.force.alphaTarget(0);\n            this.force.stop();\n        }\n\n        this.force\n            .nodes()\n            .filter(({ group }) => group === Number(groupId))\n            .forEach((node) => {\n                localStorage.setItem(node.id, JSON.stringify({ fx: node.x, fy: node.y }));\n            });\n\n        this.isDraggingNode = false;\n    };\n\n    private ticked = () => {\n        const minSvgPosY = 10;\n        const minSvgPosX = 10;\n\n        const maxSvgPosX = Number(this.svgContainerGroupNodes.attr('width'));\n        const maxSvgPosY = Number(this.svgContainerGroupNodes.attr('height'));\n\n        function validatePosition(pos: number, max: number, min: number) {\n            if (pos - min < 0) {\n                return min;\n            }\n\n            if (pos > max) {\n                return max;\n            }\n\n            return pos;\n        }\n\n        this.svgContainerGroupNodes.selectAll<SVGSVGElement, TopologyNode>('.node').attr(\n            'transform',\n            ({ x, y }) => `translate(\n                    ${validatePosition(x - SERVICE_SIZE / 2, maxSvgPosX, minSvgPosX)},\n                    ${validatePosition(y - SERVICE_SIZE / 2, maxSvgPosY, minSvgPosY)}\n                )`,\n        );\n\n        this.svgContainerGroupNodes\n            .selectAll<SVGSVGElement, TopologyLinkNormalized>('.serviceLink')\n            .attr('x1', ({ source }) => validatePosition(source.x, maxSvgPosX, minSvgPosX))\n            .attr('y1', ({ source }) => validatePosition(source.y, maxSvgPosX, minSvgPosX))\n            .attr('x2', ({ target }) => validatePosition(target.x, maxSvgPosX, minSvgPosX))\n            .attr('y2', ({ target }) => validatePosition(target.y, maxSvgPosX, minSvgPosX));\n\n        this.updateGroups();\n    };\n\n    private polygonGenerator = (groupId: string) => {\n        const node_coords: [number, number][] = this.svgContainerGroupNodes\n            .selectAll<SVGSVGElement, TopologyNode>('.node')\n            .filter(function (d) {\n                return d.group === Number(groupId);\n            })\n            .data()\n            .map(function (d) {\n                return [d.x, d.y];\n            });\n\n        return polygonHull(node_coords);\n    };\n\n    private updateGroups() {\n        this.groupIds.forEach((groupId) => {\n            let centroid: [number, number] = [0, 0];\n\n            const path = this.svgContainerGroupNodes\n                .selectAll<SVGPathElement, string>('.nodes_groups')\n                .filter((d) => d === groupId)\n                .attr('transform', 'scale(1) translate(0,0)')\n                .attr('d', (d) => {\n                    const polygon = this.polygonGenerator(d);\n                    centroid = polygon ? polygonCentroid(polygon) : [0, 0];\n\n                    return this.valueline(\n                        (polygon || [])?.map(function (point) {\n                            return [point[0] - centroid[0] || 0, point[1] - centroid[1] || 0];\n                        }),\n                    );\n                });\n\n            const $parentNode = path.node()?.parentNode as HTMLElement | null;\n\n            select($parentNode).attr(\n                'transform',\n                `translate(${centroid[0]},${centroid[1]}) scale(${1.5})`,\n            );\n        });\n    }\n\n    private initForce(nodes: TopologyNode[]) {\n        const domain = nodes.reduce((acc, node) => {\n            acc[node.group] = true;\n\n            return acc;\n        }, {} as Record<string, boolean>);\n\n        const domainValues = Object.keys(domain);\n        const rangeValuesX = domainValues.map((_, i) => (i ? (this.width - SERVICE_SIZE) / i : 0));\n        const rangeValuesY = domainValues.map((_, i) =>\n            i ? (this.height / domainValues.length) * i : 100,\n        );\n\n        const xScale = scaleOrdinal().domain(domainValues).range(rangeValuesX);\n        const yScale = scaleOrdinal().domain(domainValues).range(rangeValuesY);\n\n        return forceSimulation<TopologyNode, TopologyLinkNormalized>()\n            .force('center', forceCenter(this.width / 2, this.height / 2))\n            .force('charge', forceManyBody())\n            .force('collide', forceCollide().radius(SERVICE_SIZE * 2))\n            .alpha(0.1)\n            .alphaMin(0.07)\n            .force(\n                'x',\n                forceX<TopologyNode>()\n                    .strength(1)\n                    .x(function ({ group, fx }) {\n                        if (fx) {\n                            return fx;\n                        }\n\n                        return xScale(group.toString()) as number;\n                    }),\n            )\n            .force(\n                'y',\n                forceY<TopologyNode>()\n                    .strength(1)\n                    .y(({ group, fy }) => {\n                        if (fy) {\n                            return fy;\n                        }\n\n                        return yScale(group.toString()) as number;\n                    }),\n            )\n            .force(\n                'link',\n                forceLink<TopologyNode, TopologyLinkNormalized>()\n                    .id(({ id }) => id)\n                    .strength(({ source, target }) => {\n                        if (source.group === target.group) {\n                            return 1;\n                        }\n\n                        return 0.1;\n                    }),\n            );\n    }\n\n    private updateDOMLinks = (links: TopologyLinkNormalized[]) => {\n        // Pointer\n        this.svgContainerGroupNodes\n            .append('svg:defs')\n            .append('svg:marker')\n            .attr('id', 'arrow')\n            .attr('viewBox', '0 -5 10 10')\n            .attr('refX', SERVICE_SIZE / 2 + ARROW_SIZE)\n            .attr('refY', 0)\n            .attr('markerWidth', ARROW_SIZE)\n            .attr('markerHeight', ARROW_SIZE)\n            .attr('orient', 'auto-start-reverse')\n            .append('svg:path')\n            .style('fill', 'gray')\n            .attr('d', 'M0,-5L10,0L0,5');\n\n        // links services\n        const svgLinksData = this.svgContainerGroupNodes.selectAll('.serviceLink').data(links);\n        const svgLinks = svgLinksData.enter();\n\n        svgLinks\n            .append('line')\n            .attr('class', 'serviceLink')\n            .style('stroke', 'var(--pf-global--palette--black-400)')\n            .style('stroke-width', '1px')\n            .style('stroke-dasharray', ({ source }) => source.type === 'site' && '8, 8')\n            .attr('marker-end', ({ type }) =>\n                type === 'service' || type === 'site' ? 'none' : 'url(#arrow)',\n            );\n    };\n\n    private updateDOMNodes = async (nodes: TopologyNode[], selectedNode?: string) => {\n        this.groupIds = set(nodes.map((n) => +n.group))\n            .values()\n            .map((groupId) => ({\n                groupId,\n                count: nodes.filter((n) => n.group === Number(groupId)).length,\n            }))\n            .filter((group) => group.count > 2)\n            .map((group) => group.groupId);\n        const setColor = scaleOrdinal(schemeCategory10);\n\n        this.svgContainerGroupNodes\n            .attr('class', 'groups')\n            .selectAll('.path_placeholder')\n            .data(this.groupIds)\n            .enter()\n            .append('g')\n            .attr('class', 'path_placeholder')\n            .append('path')\n            .attr('class', 'nodes_groups')\n            .attr('stroke', (d) => setColor(d))\n            .attr('fill', (d) => setColor(d))\n            .attr('opacity', 0.15)\n            .call(\n                drag<SVGPathElement, string>()\n                    .on('start', this.groupDragstarted)\n                    .on('drag', this.groupDragged)\n                    .on('end', this.groupDragended),\n            );\n\n        const svgNodesData = this.svgContainerGroupNodes.selectAll('.node').data(nodes);\n        const svgNodes = svgNodesData.enter();\n        const enterSelection = svgNodes.append('g').attr('class', 'node');\n\n        enterSelection\n            .append(({ img }) => img?.documentElement.cloneNode(true) as HTMLElement)\n            .attr('class', 'node-img')\n            .attr('width', SERVICE_SIZE)\n            .attr('height', SERVICE_SIZE)\n            .style('fill', ({ color }) => color);\n\n        // it improves drag & drop area selection\n        enterSelection\n            .append('rect')\n            .attr('width', SERVICE_SIZE)\n            .attr('height', SERVICE_SIZE)\n            .attr('fill', 'transparent')\n            .style('cursor', 'pointer')\n            .on('mouseover', (_, { id }) => {\n                if (!this.isDraggingNode) {\n                    this.svgContainerGroupNodes\n                        .selectAll<SVGElement, TopologyLinkNormalized>('.serviceLink')\n                        .style('opacity', (svgLink) => {\n                            const isLinkConnectedToTheNode =\n                                id === svgLink.source.id || id === svgLink.target.id;\n\n                            return isLinkConnectedToTheNode ? '1' : OPACITY_NO_SELECTED_ITEM;\n                        })\n                        .style('stroke', (svgLink) => {\n                            const isLinkConnectedToTheNode =\n                                id === svgLink.source.id || id === svgLink.target.id;\n\n                            return isLinkConnectedToTheNode\n                                ? 'var(--pf-global--palette--blue-400)'\n                                : 'var(--pf-global--palette--black-400)';\n                        });\n                }\n            })\n            .on('mouseout', () => {\n                if (!this.isDraggingNode) {\n                    this.svgContainerGroupNodes\n                        .selectAll('.serviceLink')\n                        .style('opacity', '1')\n                        .style('stroke', 'var(--pf-global--palette--black-400)');\n                }\n            })\n            .on('dblclick', (e) => e.stopPropagation()) // deactivates the zoom triggered by d3-zoom\n            .on('click', (_, { id }) => {\n                this.onClickNode && this.onClickNode(id);\n            });\n\n        enterSelection\n            .append('text')\n            .attr('font-size', FONT_SIZE_DEFAULT)\n            .attr('y', SERVICE_SIZE + FONT_SIZE_DEFAULT * 2)\n            .style('fill', 'var(--pf-global--palette--black-500)')\n            .text(({ name }) => name);\n\n        enterSelection.call(\n            drag<SVGGElement, TopologyNode>()\n                .on('start', this.dragStarted)\n                .on('drag', this.dragged)\n                .on('end', this.dragEnded),\n        );\n\n        this.svgContainerGroupNodes\n            .selectAll('.node-img')\n            .style('opacity', ({ id }: any) =>\n                !!selectedNode && id !== selectedNode ? OPACITY_NO_SELECTED_ITEM : '1',\n            );\n    };\n\n    updateTopology = (\n        nodes: TopologyNode[],\n        links: TopologyLink[] | TopologyLinkNormalized[],\n        selectedNode?: string,\n    ) => {\n        this.svgContainerGroupNodes.selectAll('*').remove();\n\n        this.force\n            .nodes(nodes)\n            .on('tick', this.ticked)\n            .on('end', () => {\n                nodes.forEach((node) => {\n                    if (!localStorage.getItem(node.id)) {\n                        node.fx = node.x;\n                        node.fy = node.y;\n\n                        localStorage.setItem(node.id, JSON.stringify({ fx: node.fx, fy: node.fy }));\n                    }\n                });\n            });\n\n        this.force\n            .force<ForceLink<TopologyNode, TopologyLink | TopologyLinkNormalized>>('link')\n            ?.links(links);\n\n        this.force.restart();\n\n        this.updateDOMLinks(links as TopologyLinkNormalized[]);\n        this.updateDOMNodes(nodes, selectedNode);\n    };\n\n    reset() {\n        const $parent = this.svgContainer.node() as SVGElement;\n\n        this.svgContainer\n            .transition()\n            .duration(750)\n            .call(\n                this.handleZoom.transform,\n                zoomIdentity,\n                zoomTransform($parent).invert([this.width / 2, this.height / 2]),\n            );\n    }\n\n    zoomIn() {\n        return this.svgContainer.transition().duration(750).call(this.handleZoom.scaleBy, 1.5);\n    }\n\n    zoomOut() {\n        return this.svgContainer.transition().duration(750).call(this.handleZoom.scaleBy, 0.5);\n    }\n\n    isDragging() {\n        return this.isDraggingNode;\n    }\n}\n","/Users/vabar/Projects/skupper-console/src/pages/Topology/components/TopologySVGContainer.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Topology/index.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Topology/routes.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Topology/services/index.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Topology/services/services.enum.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Topology/services/services.interfaces.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/shared/Errors/Connection/Connection.enum.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/shared/Errors/Connection/index.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/shared/Errors/NotFound/NotFound.enum.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/shared/Errors/NotFound/index.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/shared/Errors/Server/Server.enum.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/shared/Errors/Server/index.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/shared/Errors/errors.constants.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/shared/Errors/routes.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/shared/Loading/Loading.enum.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/shared/Loading/index.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/routes.ts",["471"],[],"import { RouteObject } from 'react-router-dom';\n\nimport { servicesRoutes } from '@pages/Services/routes';\nimport { errorsRoutes } from '@pages/shared/Errors/routes';\nimport { siteRoutes } from '@pages/Sites/routes';\nimport { topologyRoutes } from '@pages/Topology/routes';\nimport { monitoringRoutes } from '@pages/Addresses/routes';\n\nexport const routes: RouteObject[] = [\n    ...siteRoutes,\n    ...monitoringRoutes,\n    ...servicesRoutes,\n    ...errorsRoutes,\n    ...topologyRoutes,\n];\n","/Users/vabar/Projects/skupper-console/src/pages/Addresses/VANServices.constants.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Addresses/VANServices.enum.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Addresses/VANServices.interfaces.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Addresses/components/FlowPairsTable.tsx",["472","473"],[],"import React, { FC, useState } from 'react';\n\nimport { TableComposable, Tbody, Td, Th, Thead, ThProps, Tr } from '@patternfly/react-table';\nimport { Link } from 'react-router-dom';\n\nimport { formatByteRate, formatBytes } from '@core/utils/formatBytes';\nimport { SitesRoutesPaths } from '@pages/Sites/Sites.enum';\n\nimport { FlowPairBasic, FlowPairsTableProps } from '../services/services.interfaces';\nimport { FlowPairsColumns } from '../VANServices.constants';\nimport { FlowPairsColumnsNames } from '../VANServices.enum';\n\nimport './FlowPairs.css';\n\nconst FlowsPairsTable: FC<FlowPairsTableProps> = function ({ flowPairs }) {\n    const [activeSortIndex, setActiveSortIndex] = useState<number>();\n    const [activeSortDirection, setActiveSortDirection] = useState<'asc' | 'desc'>();\n\n    function getSortParams(columnIndex: number): ThProps['sort'] {\n        return {\n            sortBy: {\n                index: activeSortIndex,\n                direction: activeSortDirection,\n            },\n            onSort: (_event: React.MouseEvent, index: number, direction: 'asc' | 'desc') => {\n                setActiveSortIndex(index);\n                setActiveSortDirection(direction);\n            },\n            columnIndex,\n        };\n    }\n\n    const connectionsSorted = flowPairs.sort((a: any, b: any) => {\n        const columnName = FlowPairsColumns[activeSortIndex || 0].prop as keyof FlowPairBasic;\n\n        const paramA = a[columnName] as string | number;\n        const paramB = b[columnName] as string | number;\n\n        if (paramA === b[columnName]) {\n            return 0;\n        }\n\n        if (activeSortDirection === 'asc') {\n            return paramA > paramB ? 1 : -1;\n        }\n\n        return paramA > paramB ? -1 : 1;\n    });\n\n    return (\n        <TableComposable borders={true} className=\"flows-table\">\n            <Thead hasNestedHeader>\n                <Tr>\n                    <Th hasRightBorder colSpan={6}>\n                        {FlowPairsColumnsNames.FlowForward}\n                    </Th>\n                    <Th colSpan={6} hasRightBorder>\n                        {FlowPairsColumnsNames.FlowReverse}\n                    </Th>\n                </Tr>\n                <Tr>\n                    <Th isSubheader sort={getSortParams(0)}>\n                        {FlowPairsColumnsNames.Site}\n                    </Th>\n                    <Th isSubheader sort={getSortParams(1)}>\n                        {FlowPairsColumnsNames.Process}\n                    </Th>\n                    <Th isSubheader sort={getSortParams(2)}>\n                        {FlowPairsColumnsNames.Host}\n                    </Th>\n                    <Th isSubheader sort={getSortParams(3)}>\n                        {FlowPairsColumnsNames.Port}\n                    </Th>\n                    <Th isSubheader className=\"align-th-right\" sort={getSortParams(4)}>\n                        {FlowPairsColumnsNames.ByteRate}\n                    </Th>\n                    <Th\n                        isSubheader\n                        className=\"align-th-right\"\n                        sort={getSortParams(5)}\n                        hasRightBorder\n                    >\n                        {FlowPairsColumnsNames.Bytes}\n                    </Th>\n                    <Th isSubheader sort={getSortParams(6)}>\n                        {FlowPairsColumnsNames.Site}\n                    </Th>\n                    <Th isSubheader sort={getSortParams(7)}>\n                        {FlowPairsColumnsNames.Process}\n                    </Th>\n                    <Th isSubheader sort={getSortParams(8)}>\n                        {FlowPairsColumnsNames.Host}\n                    </Th>\n                    <Th isSubheader sort={getSortParams(9)}>\n                        {FlowPairsColumnsNames.Port}\n                    </Th>\n                    <Th isSubheader className=\"align-th-right\" sort={getSortParams(10)}>\n                        {FlowPairsColumnsNames.ByteRate}\n                    </Th>\n                    <Th\n                        isSubheader\n                        className=\"align-th-right\"\n                        sort={getSortParams(11)}\n                        hasRightBorder\n                    >\n                        {FlowPairsColumnsNames.Bytes}\n                    </Th>\n                </Tr>\n            </Thead>\n            <Tbody>\n                {!!flowPairs.length &&\n                    connectionsSorted.map(\n                        ({\n                            id,\n                            bytes,\n                            byteRate,\n                            host,\n                            port,\n                            siteId,\n                            siteName,\n                            processName,\n                            targetSiteId,\n                            targetSiteName,\n                            targetByteRate,\n                            targetBytes,\n                            targetHost,\n                            targetProcessName,\n                            targetPort,\n                        }) => (\n                            <Tr key={id}>\n                                <Td\n                                    dataLabel={FlowPairsColumnsNames.Site}\n                                    className=\"secondary-color\"\n                                >\n                                    <Link to={`${SitesRoutesPaths.Details}/${siteId}`}>\n                                        {siteName}\n                                    </Link>\n                                </Td>\n                                <Td\n                                    dataLabel={FlowPairsColumnsNames.Process}\n                                    className=\"secondary-color\"\n                                >\n                                    {processName}\n                                </Td>\n                                <Td\n                                    dataLabel={FlowPairsColumnsNames.Host}\n                                    className=\"secondary-color\"\n                                >\n                                    {host}\n                                </Td>\n                                <Td\n                                    dataLabel={FlowPairsColumnsNames.Port}\n                                    className=\"secondary-color\"\n                                >\n                                    {`${port}`}\n                                </Td>\n                                <Td\n                                    dataLabel={FlowPairsColumnsNames.Bytes}\n                                    className=\"align-td-right secondary-color\"\n                                >\n                                    <b>{formatByteRate(byteRate, 3)}</b>\n                                </Td>\n                                <Td\n                                    dataLabel={FlowPairsColumnsNames.Bytes}\n                                    className=\"align-td-right secondary-color td-border-right \"\n                                >\n                                    <b>{formatBytes(bytes, 3)}</b>\n                                </Td>\n                                <Td dataLabel={FlowPairsColumnsNames.Site}>\n                                    <Link to={`${SitesRoutesPaths.Details}/${targetSiteId}`}>\n                                        {targetSiteName}\n                                    </Link>\n                                </Td>\n                                <Td dataLabel={FlowPairsColumnsNames.Process}>\n                                    {targetProcessName}\n                                </Td>\n                                <Td dataLabel={FlowPairsColumnsNames.Host}>{targetHost}</Td>\n                                <Td dataLabel={FlowPairsColumnsNames.Port}>{`${targetPort}`}</Td>\n                                <Td\n                                    dataLabel={FlowPairsColumnsNames.Bytes}\n                                    className=\"align-td-right\"\n                                >\n                                    <b>{formatByteRate(targetByteRate, 3)}</b>\n                                </Td>\n                                <Td\n                                    dataLabel={FlowPairsColumnsNames.Bytes}\n                                    className=\"align-td-right\"\n                                >\n                                    <b>{formatBytes(targetBytes, 3)}</b>\n                                </Td>\n                            </Tr>\n                        ),\n                    )}\n            </Tbody>\n        </TableComposable>\n    );\n};\n\nexport default FlowsPairsTable;\n","/Users/vabar/Projects/skupper-console/src/pages/Addresses/components/ProcessesTable.tsx",["474","475"],[],"import React, { FC, useState } from 'react';\n\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { TableComposable, Tbody, Td, Th, Thead, ThProps, Tr } from '@patternfly/react-table';\nimport { Link } from 'react-router-dom';\n\nimport { formatByteRate, formatBytes } from '@core/utils/formatBytes';\nimport { formatTime } from '@core/utils/formatTime';\nimport { SitesRoutesPaths } from '@pages/Sites/Sites.enum';\n\nimport { FlowPairBasic, ProcessesTableProps } from '../services/services.interfaces';\nimport { ProcessesColumns } from '../VANServices.constants';\nimport {\n    FlowPairsColumnsNames,\n    ProcessesColumnsNames,\n    VanServicesDescriptions,\n} from '../VANServices.enum';\n\nimport './FlowPairs.css';\n\nconst ProcessesTable: FC<ProcessesTableProps> = function ({ processes }) {\n    const [activeSortIndex, setActiveSortIndex] = useState<number>();\n    const [activeSortDirection, setActiveSortDirection] = useState<'asc' | 'desc'>();\n\n    function getSortParams(columnIndex: number): ThProps['sort'] {\n        return {\n            sortBy: {\n                index: activeSortIndex,\n                direction: activeSortDirection,\n            },\n            onSort: (_event: React.MouseEvent, index: number, direction: 'asc' | 'desc') => {\n                setActiveSortIndex(index);\n                setActiveSortDirection(direction);\n            },\n            columnIndex,\n        };\n    }\n\n    const processesSorted = processes.sort((a: any, b: any) => {\n        const columnName = ProcessesColumns[activeSortIndex || 0].prop as keyof FlowPairBasic;\n\n        const paramA = a[columnName] as string | number;\n        const paramB = b[columnName] as string | number;\n\n        if (paramA === b[columnName]) {\n            return 0;\n        }\n\n        if (activeSortDirection === 'asc') {\n            return paramA > paramB ? 1 : -1;\n        }\n\n        return paramA > paramB ? -1 : 1;\n    });\n\n    return (\n        <TableComposable borders={true} className=\"processes-table\">\n            <Thead>\n                <Tr>\n                    <Th sort={getSortParams(0)}>{ProcessesColumnsNames.Site}</Th>\n                    <Th sort={getSortParams(1)}>{FlowPairsColumnsNames.Process}</Th>\n                    <Th sort={getSortParams(2)} modifier=\"fitContent\">\n                        {FlowPairsColumnsNames.Host}\n                    </Th>\n                    <Th sort={getSortParams(3)} modifier=\"fitContent\">\n                        {FlowPairsColumnsNames.Port}\n                    </Th>\n                    <Th sort={getSortParams(4)}>{FlowPairsColumnsNames.ImageName}</Th>\n                    <Th sort={getSortParams(5)} className=\"align-th-right\">\n                        {FlowPairsColumnsNames.ByteRate}\n                    </Th>\n                    <Th sort={getSortParams(6)} className=\"align-th-right\">\n                        {FlowPairsColumnsNames.Bytes}\n                    </Th>\n                    <Th sort={getSortParams(7)} className=\"align-th-right\">\n                        {FlowPairsColumnsNames.MaxTTFB}\n                        <Tooltip position=\"right\" content={VanServicesDescriptions.TTFBDesc}>\n                            <OutlinedQuestionCircleIcon className=\"pf-u-ml-xs\" />\n                        </Tooltip>\n                    </Th>\n                </Tr>\n            </Thead>\n            <Tbody>\n                {!!processes.length &&\n                    processesSorted.map(\n                        ({\n                            id,\n                            bytes,\n                            byteRate,\n                            host,\n                            port,\n                            siteId,\n                            siteName,\n                            processName,\n                            maxTTFB,\n                            imageName,\n                        }) => (\n                            <Tr key={id}>\n                                <Td dataLabel={FlowPairsColumnsNames.Site}>\n                                    <Link to={`${SitesRoutesPaths.Details}/${siteId}`}>\n                                        {siteName}\n                                    </Link>\n                                </Td>\n                                <Td dataLabel={FlowPairsColumnsNames.Host}>{processName}</Td>\n                                <Td dataLabel={FlowPairsColumnsNames.Port}>{host}</Td>\n                                <Td dataLabel={FlowPairsColumnsNames.Process}>{port}</Td>\n                                <Td dataLabel={FlowPairsColumnsNames.ImageName}>{imageName}</Td>\n                                <Td\n                                    dataLabel={FlowPairsColumnsNames.ByteRate}\n                                    className=\"align-td-right\"\n                                >\n                                    <b>{formatByteRate(byteRate, 3)}</b>\n                                </Td>\n                                <Td\n                                    dataLabel={FlowPairsColumnsNames.Bytes}\n                                    className=\"align-td-right\"\n                                >\n                                    <b>{formatBytes(bytes, 3)}</b>\n                                </Td>\n                                <Td\n                                    dataLabel={FlowPairsColumnsNames.MaxTTFB}\n                                    className=\"align-td-right\"\n                                >\n                                    <b> {formatTime(maxTTFB)}</b>\n                                </Td>\n                            </Tr>\n                        ),\n                    )}\n            </Tbody>\n        </TableComposable>\n    );\n};\n\nexport default ProcessesTable;\n","/Users/vabar/Projects/skupper-console/src/pages/Addresses/index.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Addresses/routes.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Addresses/services/index.ts",["476"],[],"import { RESTApi } from 'API/REST';\nimport { DeviceResponse, ProcessResponse, SiteResponse } from 'API/REST.interfaces';\n\nimport {\n    VanServicesTopology,\n    VanAddresses,\n    ExtendedFlowPair,\n    FlowsPairsBasic,\n    FlowPairBasic,\n    ProcessRow,\n} from './services.interfaces';\n\nexport const MonitorServices = {\n    fetchVanAddresses: async (): Promise<VanAddresses[]> => {\n        const vanAddresses = await RESTApi.fetchVanAddresses();\n\n        return vanAddresses.map((vanAddress) => ({\n            ...vanAddress,\n            totalFlows: Math.floor(vanAddress.totalFlows / 2),\n            currentFlows: Math.floor(vanAddress.currentFlows / 2),\n        }));\n    },\n\n    // TODO: waiting for the API to remove multiple calls and filters\n    fetchFlowPairsByVanAddressId: async (\n        id: string,\n        currentPage: number,\n        visibleItems: number,\n    ): Promise<FlowsPairsBasic> => {\n        const flowsPairs = await RESTApi.fetchFlowsPairsByVanAddr(id);\n\n        if (!flowsPairs) {\n            return {\n                connections: [],\n                total: 0,\n            };\n        }\n\n        const processes = await RESTApi.fetchProcesses();\n        const sites = await RESTApi.fetchFlowsSites();\n\n        const processesMap = processes.reduce((acc, process) => {\n            acc[process.identity] = process;\n\n            return acc;\n        }, {} as Record<string, ProcessResponse>);\n\n        const sitesMap = sites.reduce((acc, site) => {\n            acc[site.identity] = site.name;\n\n            return acc;\n        }, {} as Record<string, string>);\n\n        const flowsPairsExtended = await Promise.all(\n            flowsPairs.map(async (flowPair) => {\n                const { octetRate, octets, startTime, endTime, process, latency } =\n                    flowPair.forwardFlow;\n                const siteName = sitesMap[flowPair.sourceSiteId];\n                const processName = processesMap[process].name;\n                const processId = processesMap[process].identity;\n                const processHost = processesMap[process].sourceHost;\n                const processImageName = processesMap[process].imageName;\n\n                const {\n                    octetRate: targetByteRate,\n                    octets: targetBytes,\n                    process: targetProcess,\n                    latency: targetLatency,\n                } = flowPair.CounterFlow;\n\n                const targetSiteName = sitesMap[flowPair.destinationSiteId];\n                const targetProcessName = processesMap[targetProcess].name;\n                const targetProcessId = processesMap[targetProcess].identity;\n                const targetHost = processesMap[targetProcess].sourceHost;\n                const targetProcessImageName = processesMap[targetProcess].imageName;\n\n                const connector = await RESTApi.fetchFlowsListener(flowPair.forwardFlow.parent);\n                const targetConnector = await RESTApi.fetchFlowConnectorByProcessId(\n                    targetProcessId,\n                );\n\n                return {\n                    id: flowPair.identity,\n                    siteId: flowPair.sourceSiteId,\n                    siteName,\n                    byteRate: octetRate,\n                    bytes: octets,\n                    host: processHost,\n                    port: connector.destPort,\n                    startTime,\n                    endTime,\n                    processId,\n                    processName,\n                    processImageName,\n                    latency,\n\n                    targetSiteId: flowPair.destinationSiteId,\n                    targetSiteName,\n                    targetByteRate,\n                    targetBytes,\n                    targetHost,\n                    targetProcessId,\n                    targetProcessName,\n                    targetProcessImageName,\n                    targetPort: targetConnector.destPort,\n                    targetLatency,\n                    protocol: connector.protocol,\n                };\n            }),\n        );\n\n        // filter collection\n        const flowsFiltered = flowsPairsExtended.sort((a, b) => b.startTime - a.startTime);\n\n        const startOffset = (currentPage - 1) * visibleItems;\n        //paginate collection\n        const flowsPairsPaginated = flowsFiltered.filter(\n            (_, index) => index >= startOffset && index < startOffset + visibleItems,\n        );\n\n        return { connections: flowsPairsPaginated, total: flowsFiltered.length };\n    },\n\n    fetchProcessesByVanAddr: async (id: string): Promise<ProcessRow[]> => {\n        const processes = await RESTApi.fetchProcessesByVanAddr(id);\n\n        return Promise.all(\n            processes.map(async (process) => {\n                const site = await RESTApi.fetchFlowsSite(process.parent);\n                const { destPort } = await RESTApi.fetchFlowConnectorByProcessId(process.identity);\n                const flows = await RESTApi.fetchFlowsByProcessesId(process.identity);\n\n                const flowsMetrics = flows\n                    .filter(({ endTime }) => !endTime)\n                    .reduce(\n                        (acc, { octetRate, octets, latency }) => ({\n                            bytes: (acc?.bytes || 0) + octets,\n                            byteRate: (acc?.byteRate || 0) + octetRate,\n                            maxTTFB: Math.max(acc.maxTTFB || 0, latency),\n                        }),\n                        {} as { bytes: number; byteRate: number; maxTTFB: number },\n                    );\n\n                return {\n                    id: process.identity,\n                    siteId: site.identity,\n                    siteName: site.name,\n                    processName: process.name,\n                    host: process.sourceHost,\n                    port: destPort,\n                    imageName: process.imageName,\n                    ...flowsMetrics,\n                };\n            }),\n        );\n    },\n\n    fetchFlowPairByFlowId: async (id: string): Promise<ExtendedFlowPair> => {\n        const flowPair = await RESTApi.fetchFlowPair(id);\n\n        const { parent, process } = flowPair.forwardFlow;\n\n        const startProcess = await RESTApi.fetchProcess(process);\n        const startSite = await RESTApi.fetchFlowsSite(startProcess.parent);\n\n        const startListener = await RESTApi.fetchFlowsListener(parent);\n        const startConnector = await RESTApi.fetchFlowsConnector(parent);\n        const startDevice = { ...startListener, ...startConnector } as DeviceResponse;\n\n        const start = {\n            ...flowPair.forwardFlow,\n            device: startDevice,\n            site: startSite,\n            processFlow: startProcess,\n            parentType: startDevice.recType,\n        };\n\n        const endFlow = flowPair.CounterFlow;\n\n        const { parent: reverseParent, process: reverseProcess } = flowPair.CounterFlow;\n\n        const endProcess = await RESTApi.fetchProcess(reverseProcess);\n        const endSite = (await RESTApi.fetchFlowsSite(endProcess.parent)) as SiteResponse;\n\n        const endListener = await RESTApi.fetchFlowsListener(reverseParent);\n        const endConnector = await RESTApi.fetchFlowsConnector(reverseParent);\n\n        const endFlowsDevice = { ...endListener, ...endConnector } as DeviceResponse;\n\n        const end = {\n            ...endFlow,\n            device: endFlowsDevice,\n            site: endSite,\n            processFlow: endProcess,\n            parentType: endFlowsDevice.recType,\n        };\n\n        return {\n            startFlow: start,\n            endFlow: end,\n        };\n    },\n\n    fetchFlowPairTopology: async (): Promise<VanServicesTopology> => RESTApi.fetchFlowsTopology(),\n\n    getProcessesViewData(flowPairs: FlowPairBasic[]) {\n        const processesMap = flowPairs.reduce((acc, flowPair) => {\n            acc[flowPair.processName] = {\n                id: flowPair.processId,\n                siteName: flowPair.siteName,\n                processName: flowPair.processName,\n                bytes: (acc[flowPair.processName]?.bytes || 0) + flowPair.bytes,\n                byteRate: (acc[flowPair.processName]?.byteRate || 0) + flowPair.byteRate,\n                host: flowPair.host,\n                port: flowPair.port,\n                minTTFB: Math.min(acc[flowPair.processName]?.latency || 0, flowPair.latency),\n                maxTTFB: Math.max(acc[flowPair.processName]?.latency || 0, flowPair.latency),\n                imageName: flowPair.processImageName,\n                protocol: flowPair.protocol,\n            };\n\n            acc[flowPair.targetProcessName] = {\n                id: flowPair.targetProcessId,\n                siteName: flowPair.targetSiteName,\n                processName: flowPair.targetProcessName,\n                bytes: (acc[flowPair.targetProcessName]?.bytes || 0) + flowPair.targetBytes,\n                byteRate:\n                    (acc[flowPair.targetProcessName]?.byteRate || 0) + flowPair.targetByteRate,\n                host: flowPair.targetHost,\n                port: flowPair.targetPort,\n                minTTFB: Math.min(\n                    acc[flowPair.processName]?.targetLatency || 0,\n                    flowPair.targetLatency,\n                ),\n                maxTTFB: Math.max(\n                    acc[flowPair.processName]?.targetLatency || 0,\n                    flowPair.targetLatency,\n                ),\n                imageName: flowPair.targetProcessImageName,\n                protocol: flowPair.protocol,\n            };\n\n            return acc;\n        }, {} as Record<string, any>);\n\n        return Object.values(processesMap);\n    },\n};\n","/Users/vabar/Projects/skupper-console/src/pages/Addresses/services/services.enum.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Addresses/services/services.interfaces.ts",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Addresses/views/FlowPairs.tsx",[],[],"/Users/vabar/Projects/skupper-console/src/pages/Addresses/views/VANServices.tsx",[],[],{"ruleId":"477","severity":1,"message":"478","line":5,"column":1,"nodeType":"479","endLine":5,"endColumn":76,"fix":"480"},{"ruleId":"477","severity":1,"message":"481","line":4,"column":1,"nodeType":"479","endLine":4,"endColumn":76,"fix":"482"},{"ruleId":"483","severity":1,"message":"484","line":41,"column":8,"nodeType":"485","endLine":41,"endColumn":19,"suggestions":"486"},{"ruleId":"487","severity":1,"message":"488","line":25,"column":56,"nodeType":"489","messageId":"490","endLine":25,"endColumn":59,"suggestions":"491"},{"ruleId":"487","severity":1,"message":"488","line":444,"column":40,"nodeType":"489","messageId":"490","endLine":444,"endColumn":43,"suggestions":"492"},{"ruleId":"477","severity":1,"message":"493","line":7,"column":1,"nodeType":"479","endLine":7,"endColumn":60,"fix":"494"},{"ruleId":"487","severity":1,"message":"488","line":33,"column":50,"nodeType":"489","messageId":"490","endLine":33,"endColumn":53,"suggestions":"495"},{"ruleId":"487","severity":1,"message":"488","line":33,"column":58,"nodeType":"489","messageId":"490","endLine":33,"endColumn":61,"suggestions":"496"},{"ruleId":"487","severity":1,"message":"488","line":40,"column":48,"nodeType":"489","messageId":"490","endLine":40,"endColumn":51,"suggestions":"497"},{"ruleId":"487","severity":1,"message":"488","line":40,"column":56,"nodeType":"489","messageId":"490","endLine":40,"endColumn":59,"suggestions":"498"},{"ruleId":"487","severity":1,"message":"488","line":244,"column":33,"nodeType":"489","messageId":"490","endLine":244,"endColumn":36,"suggestions":"499"},"import/order","`@pages/Addresses/VANServices.enum` import should occur before import of `@pages/Sites/Sites.enum`","ImportDeclaration",{"range":"500","text":"501"},"`@pages/Addresses/VANServices.enum` import should occur before import of `@pages/Services/Services.enum`",{"range":"502","text":"503"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'data', 'lastTimestamp', and 'samples'. Either include them or remove the dependency array.","ArrayExpression",["504"],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["505","506"],["507","508"],"`@pages/Addresses/routes` import should occur before import of `@pages/Services/routes`",{"range":"509","text":"510"},["511","512"],["513","514"],["515","516"],["517","518"],["519","520"],[142,347],"import { VANServicesRoutesPaths } from '@pages/Addresses/VANServices.enum';\nimport { SitesRoutesPaths } from '@pages/Sites/Sites.enum';\nimport { TopologyRoutesPaths } from '@pages/Topology/Topology.enum';\n",[0,274],"import { VANServicesRoutesPaths } from '@pages/Addresses/VANServices.enum';\nimport { ServicesRoutesPaths } from '@pages/Services/Services.enum';\nimport { SitesRoutesPaths } from '@pages/Sites/Sites.enum';\nimport { TopologyRoutesPaths } from '@pages/Topology/Topology.enum';\n",{"desc":"521","fix":"522"},{"messageId":"523","fix":"524","desc":"525"},{"messageId":"526","fix":"527","desc":"528"},{"messageId":"523","fix":"529","desc":"525"},{"messageId":"526","fix":"530","desc":"528"},[49,333],"import { monitoringRoutes } from '@pages/Addresses/routes';\nimport { servicesRoutes } from '@pages/Services/routes';\nimport { errorsRoutes } from '@pages/shared/Errors/routes';\nimport { siteRoutes } from '@pages/Sites/routes';\nimport { topologyRoutes } from '@pages/Topology/routes';\n",{"messageId":"523","fix":"531","desc":"525"},{"messageId":"526","fix":"532","desc":"528"},{"messageId":"523","fix":"533","desc":"525"},{"messageId":"526","fix":"534","desc":"528"},{"messageId":"523","fix":"535","desc":"525"},{"messageId":"526","fix":"536","desc":"528"},{"messageId":"523","fix":"537","desc":"525"},{"messageId":"526","fix":"538","desc":"528"},{"messageId":"523","fix":"539","desc":"525"},{"messageId":"526","fix":"540","desc":"528"},"Update the dependencies array to be: [data, lastTimestamp, samples, timestamp]",{"range":"541","text":"542"},"suggestUnknown",{"range":"543","text":"544"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"543","text":"545"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"546","text":"544"},{"range":"546","text":"545"},{"range":"547","text":"544"},{"range":"547","text":"545"},{"range":"548","text":"544"},{"range":"548","text":"545"},{"range":"549","text":"544"},{"range":"549","text":"545"},{"range":"550","text":"544"},{"range":"550","text":"545"},{"range":"551","text":"544"},{"range":"551","text":"545"},[1442,1453],"[data, lastTimestamp, samples, timestamp]",[734,737],"unknown","never",[15654,15657],[1287,1290],[1295,1298],[1518,1521],[1526,1529],[9530,9533]]