name: Bundle-dev

on:
  push:
    # Trigger on pushes to the `main` and `v2` branches
    branches:
      - main
      - v2

  # You can also manually trigger the workflow
  workflow_dispatch:

jobs:
  build-and-release:
    name: Build and release bundle-dev
    runs-on: ubuntu-latest

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Set up Node.js ‚öôÔ∏è
        uses: actions/setup-node@v4
        with:
          node-version: '20.X'
          cache: 'yarn'
          cache-dependency-path: yarn.lock

      - name: Install üì¶
        run: |
          HUSKY=0 CYPRESS_RUN_BINARY=0 yarn install --immutable --immutable-cache --check-cache --prefer-offline

      - name: Build üöß
        run: |
          yarn build
        env:
          CI: false

      - name: Package üì¶
        run: |
          cd build/ && tar -zcvf ../bundle-dev.tgz --exclude='./data' .

      - name: Delete previous bundle-dev release if exists üî•
        run: |
          # Fetch all releases for the repository
          releases=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases")

          # Extract IDs of all releases with the name "bundle-dev" (if any exist)
          release_ids=$(echo "$releases" | jq -r '.[] | select(.name == "bundle-dev") | .id')

          # If there are previous releases, delete them
          if [ -n "$release_ids" ]; then
            for release_id in $release_ids; do
              echo "Deleting previous release with ID $release_id"
              curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
            done
          else
            echo "No previous release found to delete."
          fi

      - name: Create bundle-dev ‚úÖ
        id: create_bundle_dev
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: bundle-dev-${{ github.run_id }} # Use run_id for unique tag
          release_name: bundle-dev
          body: |
            Bundle-dev is available as a tar ball:
            - bundle-dev.tgz
          prerelease: true
          generate_release_notes: false
          public: true
          skip_notifications: true

      - name: Upload Release Asset ‚¨ÜÔ∏è
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_bundle_dev.outputs.upload_url }}
          asset_path: ./bundle-dev.tgz
          asset_name: bundle-dev.tgz
          asset_content_type: application/tar+gzip
